// SASS mixins

$xsmall: 320px;
$small: 544px;
$medium: 768px;
$large: 992px;
$xlarge: 1200px;

@mixin media-breakpoint($breakpoint) {
  $raw-query: map-get(("xsmall": (max-width: $xsmall,
      ),
      "small": (min-width: $xsmall,
      ) and (max-width: $small,
      ),
      "medium": (min-width: $small,
      ) and (max-width: $medium,
      ),
      "large": (min-width: $medium,
      ) and (max-width: $large,
      ),
      "xlarge": (min-width: $large,
      ),
    ),
    $breakpoint );

  @if $raw-query {
    $query: if(type-of($raw-query)=="string",
      unquote($raw-query),
      inspect($raw-query));

    @media #{$query} {
      @content;
    }
  }

  @else {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }
}

@mixin media-breakpoint-up($breakpoint) {
  $raw-query: map-get(("xsmall": (min-width: $xsmall,
      ),
      "small": (min-width: $small,
      ),
      "medium": (min-width: $medium,
      ),
      "large": (min-width: $large,
      ),
      "xlarge": (min-width: $large,
      ),
    ),
    $breakpoint );

  @if $raw-query {
    $query: if(type-of($raw-query)=="string",
      unquote($raw-query),
      inspect($raw-query));

    @media #{$query} {
      @content;
    }
  }

  @else {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }
}

@mixin media-breakpoint-down($breakpoint) {
  $raw-query: map-get(("xsmall": (max-width: $xsmall,
      ),
      "small": (max-width: $small,
      ),
      "medium": (max-width: $medium,
      ),
      "large": (max-width: $large,
      ),
      "xlarge": (max-width: $large,
      ),
    ),
    $breakpoint );

  @if $raw-query {
    $query: if(type-of($raw-query)=="string",
      unquote($raw-query),
      inspect($raw-query));

    @media #{$query} {
      @content;
    }
  }

  @else {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }
}

@mixin rounded-box {
  border-radius: 1.5rem !important;
  border: 2px solid #ececec;
}

@mixin rounded-box-shadow {
  border-radius: 1.5rem !important;
  box-shadow: -3px 3px 8px #bababa;
}

@mixin borderRadius($raduis) {
  border-radius: $raduis;
  -webkit-border-radius: $raduis;
  -moz-border-radius: $raduis;
  -ms-border-radius: $raduis;
  -o-border-radius: $raduis;
}

@mixin boxShadow($propery) {
  box-shadow: $propery;
  -webkit-box-shadow: $propery;
  -moz-box-shadow: $propery;
  -ms-box-shadow: $propery;
  -o-box-shadow: $propery;
}

@mixin paragraph() {
  font-size: 12px;
  color: $grey-color40;
  margin-bottom: 18px;
}

@mixin dropShadow($prop) {
  filter: drop-shadow($prop);
  -webkit-filter: drop-shadow($prop);
}

@mixin hover-active-btn {
  &:hover {
    background: linear-gradient(0deg, rgba(0, 0, 0, 0.04), rgba(0, 0, 0, 0.04)),
      #ffffff;
  }

  &:active {
    background: linear-gradient(0deg, rgba(0, 0, 0, 0.08), rgba(0, 0, 0, 0.08)),
      #ffffff;
  }
}

@mixin responsive-gt-small-screen-circle-day {
  :host {
    ::ng-deep fxt-circle-day {
      .wrapper {
        ::ng-deep .fxt-icon-status {

          >i:not(.info-metadata) {
            font-size: 35px;
          }

          >i.info-metadata {
            font-size: 20px;

            &.first.last {
              top: 3px;
            }
          }
        }

        ::ng-deep fxt-location-status {
          &.mode-half-day {
            height: 60px !important;

            .fxt-icon-status {
              &:first-of-type {
                top: 10px;
                left: 8px;
              }

              &:last-of-type {
                bottom: 10px;
                right: 8px;
              }

              >i:not(.info-metadata) {
                font-size: 25px;
              }

              >i.info-metadata {
                font-size: 20px;

                &.first.last {
                  top: 3px;
                }

                &.first {
                  &:not(.last) {
                    top: -10px;
                    left: -19px;
                  }
                }

                &.last {
                  &:not(.first) {
                    bottom: -12px;
                    right: -19px;
                  }
                }

              }
            }
          }
        }

      }
    }
  }
}